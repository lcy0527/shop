形式1#把错误信息输出到console控制台	第一种方式
#log4j.appender.xxx  前缀一般不改变，XXX为变量名=实例化对象
log4j.appender.console=org.apache.log4j.ConsoleAppender
#console.Target对象名点属性=输出位置
log4j.appender.console.Target=System.err
#还要实例化Layout对象，因为他是抽象类 
#实例化的是Layout的子类
log4j.appender.console.Layout=org.apache.log4j.PatternLayout 
#设置输出格式%d日期   %c类 %l行号 %m错误信息 %n换行
log4j.appender.console.Layout.ConversionPattern=%d{yyyy-MM-dd hh\:mm\:ss}\t%c\t%l \t%m\t%n
#使用log4j.rootLogger=级别，变量1，2，3...
#级别必须位于第一个位置 变量随意互换位置
#log4j.rootLogger=debug,file2


#把信息输出到文件中，按照文件大小创建 		第二种方式
log4j.appender.file=org.apache.log4j.RollingFileAppender
#文件的存储位置      D盘下的log4j文件夹
log4j.appender.file.File=d\:/log/log4j.log
#文件的最大容量
log4j.appender.file.MaxFileSize=1kb
#输入超过了设置的容量，默认产生额外的稳健数量
log4j.appender.file.MaxBackupIndex=3
#设置内容满了之后覆盖之前的内容
log4j.appender.file.Append=true
log4j.appender.file.Layout=org.apache.log4j.PatternLayout
log4j.appender.file.Layout.ConversionPattern=%d{yyyy-MM-dd hh\:mm\:ss}\t%c\t%l \t%m\t%n


#将信息输出到文件中，按照时间创建
#每分钟生成文件
log4j.appender.file2=org.apache.log4j.DailyRollingFileAppender

#DatePattern可以指定6中时间方式实现记录日志
#monthly（每个月），weekly（每周），daily（每天）
#half-daily（每半天），hourly（每小时），minutely（每分钟）
log4j.appender.file2.Append=true
log4j.appender.file2.DatePattern='.'yyyy-MM-dd-hh-mm'.log'
log4j.appender.file2.File=d\:/log2/log4j.log
log4j.appender.file2.Threshold=debug
log4j.appender.file2.Layout=org.apache.log4j.PatternLayout
log4j.appender.file2.Layout.ConversionPattern=%d{yyyy-MM-dd hh\:mm\:ss}\t%c\t%l \t%m\t%n
#输出啥啊
#log4j.rootLogger=debug,console
#指定要输出的包文件
log4j.logger.com.log4jdemo=debug,console




